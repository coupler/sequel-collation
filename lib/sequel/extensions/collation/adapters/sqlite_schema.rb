# Autogenerated from a Treetop grammar. Edits may be lost.


module SQLiteSchema
  include Treetop::Runtime

  def root
    @root ||= :create_table
  end

  module CreateTable0
    def comma
      elements[0]
    end

    def table_constraints
      elements[1]
    end
  end

  module CreateTable1
    def create
      elements[0]
    end

    def table
      elements[2]
    end

    def a
      elements[4]
    end

    def left_paren
      elements[5]
    end

    def b
      elements[6]
    end

    def right_paren
      elements[8]
    end
  end

  module CreateTable2
    def qualified_table_name
      a.text_value.strip
    end

    def column_defs
      b
    end
  end

  def _nt_create_table
    start_index = index
    if node_cache[:create_table].has_key?(index)
      cached = node_cache[:create_table][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_create
    s0 << r1
    if r1
      r3 = _nt_temporary
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r4 = _nt_table
        s0 << r4
        if r4
          r6 = _nt_if_not_exists
          if r6
            r5 = r6
          else
            r5 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r5
          if r5
            r7 = _nt_qualified_table_name
            s0 << r7
            if r7
              r8 = _nt_left_paren
              s0 << r8
              if r8
                r9 = _nt_column_defs
                s0 << r9
                if r9
                  i11, s11 = index, []
                  r12 = _nt_comma
                  s11 << r12
                  if r12
                    r13 = _nt_table_constraints
                    s11 << r13
                  end
                  if s11.last
                    r11 = instantiate_node(SyntaxNode,input, i11...index, s11)
                    r11.extend(CreateTable0)
                  else
                    @index = i11
                    r11 = nil
                  end
                  if r11
                    r10 = r11
                  else
                    r10 = instantiate_node(SyntaxNode,input, index...index)
                  end
                  s0 << r10
                  if r10
                    r14 = _nt_right_paren
                    s0 << r14
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CreateTable1)
      r0.extend(CreateTable2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:create_table][start_index] = r0

    r0
  end

  def _nt_whitespace
    start_index = index
    if node_cache[:whitespace].has_key?(index)
      cached = node_cache[:whitespace][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if has_terminal?('\G[ \\r\\n\\t]', true, index)
      r0 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      r0 = nil
    end

    node_cache[:whitespace][start_index] = r0

    r0
  end

  module WhitespaceEater0
  end

  def _nt_whitespace_eater
    start_index = index
    if node_cache[:whitespace_eater].has_key?(index)
      cached = node_cache[:whitespace_eater][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i1, s1 = index, []
    i2 = index
    r3 = _nt_whitespace
    if r3
      @index = i2
      r2 = instantiate_node(SyntaxNode,input, index...index)
    else
      r2 = nil
    end
    s1 << r2
    if r2
      s4, i4 = [], index
      loop do
        r5 = _nt_whitespace
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s1 << r4
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(WhitespaceEater0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r0 = instantiate_node(SyntaxNode,input, index...index)
    end

    node_cache[:whitespace_eater][start_index] = r0

    r0
  end

  module Boundary0
  end

  module Boundary1
    def whitespace_eater
      elements[1]
    end
  end

  def _nt_boundary
    start_index = index
    if node_cache[:boundary].has_key?(index)
      cached = node_cache[:boundary][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    i3 = index
    i4 = index
    r5 = _nt_whitespace
    if r5
      r4 = r5
    else
      r6 = _nt_quoted_identifier
      if r6
        r4 = r6
      else
        if has_terminal?(',', false, index)
          r7 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure(',')
          r7 = nil
        end
        if r7
          r4 = r7
        else
          if has_terminal?('(', false, index)
            r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure('(')
            r8 = nil
          end
          if r8
            r4 = r8
          else
            if has_terminal?(')', false, index)
              r9 = instantiate_node(SyntaxNode,input, index...(index + 1))
              @index += 1
            else
              terminal_parse_failure(')')
              r9 = nil
            end
            if r9
              r4 = r9
            else
              @index = i4
              r4 = nil
            end
          end
        end
      end
    end
    if r4
      r3 = nil
    else
      @index = i3
      r3 = instantiate_node(SyntaxNode,input, index...index)
    end
    s2 << r3
    if r3
      if index < input_length
        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("any character")
        r10 = nil
      end
      s2 << r10
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(Boundary0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = nil
    else
      @index = i1
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r11 = _nt_whitespace_eater
      s0 << r11
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Boundary1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:boundary][start_index] = r0

    r0
  end

  module RightParen0
    def whitespace_eater
      elements[1]
    end
  end

  def _nt_right_paren
    start_index = index
    if node_cache[:right_paren].has_key?(index)
      cached = node_cache[:right_paren][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(')', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(')')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_whitespace_eater
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(RightParen0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:right_paren][start_index] = r0

    r0
  end

  module Comma0
    def whitespace_eater
      elements[1]
    end
  end

  def _nt_comma
    start_index = index
    if node_cache[:comma].has_key?(index)
      cached = node_cache[:comma][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?(',', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure(',')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_whitespace_eater
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Comma0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:comma][start_index] = r0

    r0
  end

  module LeftParen0
    def whitespace_eater
      elements[1]
    end
  end

  def _nt_left_paren
    start_index = index
    if node_cache[:left_paren].has_key?(index)
      cached = node_cache[:left_paren][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('(', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('(')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_whitespace_eater
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LeftParen0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:left_paren][start_index] = r0

    r0
  end

  module QualifiedTableName0
    def database_name
      elements[0]
    end

    def dot
      elements[1]
    end
  end

  module QualifiedTableName1
    def table_name
      elements[1]
    end
  end

  def _nt_qualified_table_name
    start_index = index
    if node_cache[:qualified_table_name].has_key?(index)
      cached = node_cache[:qualified_table_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i2, s2 = index, []
    r3 = _nt_database_name
    s2 << r3
    if r3
      r4 = _nt_dot
      s2 << r4
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(QualifiedTableName0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r5 = _nt_table_name
      s0 << r5
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(QualifiedTableName1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:qualified_table_name][start_index] = r0

    r0
  end

  def _nt_table_name
    start_index = index
    if node_cache[:table_name].has_key?(index)
      cached = node_cache[:table_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_identifier

    node_cache[:table_name][start_index] = r0

    r0
  end

  def _nt_database_name
    start_index = index
    if node_cache[:database_name].has_key?(index)
      cached = node_cache[:database_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_identifier

    node_cache[:database_name][start_index] = r0

    r0
  end

  def _nt_column_name
    start_index = index
    if node_cache[:column_name].has_key?(index)
      cached = node_cache[:column_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_identifier

    node_cache[:column_name][start_index] = r0

    r0
  end

  module QualifiedColumnName0
    def column_name
      elements[1]
    end
  end

  def _nt_qualified_column_name
    start_index = index
    if node_cache[:qualified_column_name].has_key?(index)
      cached = node_cache[:qualified_column_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_qualified_table_name
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_column_name
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(QualifiedColumnName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:qualified_column_name][start_index] = r0

    r0
  end

  module Dot0
    def boundary
      elements[1]
    end
  end

  def _nt_dot
    start_index = index
    if node_cache[:dot].has_key?(index)
      cached = node_cache[:dot][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('.', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('.')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Dot0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:dot][start_index] = r0

    r0
  end

  module Create0
    def boundary
      elements[1]
    end
  end

  def _nt_create
    start_index = index
    if node_cache[:create].has_key?(index)
      cached = node_cache[:create][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('CREATE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('CREATE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Create0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:create][start_index] = r0

    r0
  end

  module Temporary0
    def boundary
      elements[1]
    end
  end

  def _nt_temporary
    start_index = index
    if node_cache[:temporary].has_key?(index)
      cached = node_cache[:temporary][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('TEMPORARY', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 9))
      @index += 9
    else
      terminal_parse_failure('TEMPORARY')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('TEMP', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('TEMP')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_boundary
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Temporary0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:temporary][start_index] = r0

    r0
  end

  module Table0
    def boundary
      elements[1]
    end
  end

  def _nt_table
    start_index = index
    if node_cache[:table].has_key?(index)
      cached = node_cache[:table][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('TABLE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('TABLE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Table0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:table][start_index] = r0

    r0
  end

  module If0
    def boundary
      elements[1]
    end
  end

  def _nt_if
    start_index = index
    if node_cache[:if].has_key?(index)
      cached = node_cache[:if][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('IF', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('IF')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(If0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:if][start_index] = r0

    r0
  end

  module Not0
    def boundary
      elements[1]
    end
  end

  def _nt_not
    start_index = index
    if node_cache[:not].has_key?(index)
      cached = node_cache[:not][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('NOT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('NOT')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Not0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:not][start_index] = r0

    r0
  end

  module Exists0
    def boundary
      elements[1]
    end
  end

  def _nt_exists
    start_index = index
    if node_cache[:exists].has_key?(index)
      cached = node_cache[:exists][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('EXISTS', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('EXISTS')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Exists0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:exists][start_index] = r0

    r0
  end

  module Unique0
    def boundary
      elements[1]
    end
  end

  def _nt_unique
    start_index = index
    if node_cache[:unique].has_key?(index)
      cached = node_cache[:unique][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('UNIQUE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('UNIQUE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Unique0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:unique][start_index] = r0

    r0
  end

  module Primary0
    def boundary
      elements[1]
    end
  end

  def _nt_primary
    start_index = index
    if node_cache[:primary].has_key?(index)
      cached = node_cache[:primary][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('PRIMARY', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('PRIMARY')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Primary0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:primary][start_index] = r0

    r0
  end

  module Foreign0
    def boundary
      elements[1]
    end
  end

  def _nt_foreign
    start_index = index
    if node_cache[:foreign].has_key?(index)
      cached = node_cache[:foreign][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('FOREIGN', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('FOREIGN')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Foreign0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:foreign][start_index] = r0

    r0
  end

  module Key0
    def boundary
      elements[1]
    end
  end

  def _nt_key
    start_index = index
    if node_cache[:key].has_key?(index)
      cached = node_cache[:key][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('KEY', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('KEY')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Key0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:key][start_index] = r0

    r0
  end

  module Collate0
    def boundary
      elements[1]
    end
  end

  def _nt_collate
    start_index = index
    if node_cache[:collate].has_key?(index)
      cached = node_cache[:collate][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('COLLATE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('COLLATE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Collate0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:collate][start_index] = r0

    r0
  end

  module AscDesc0
    def boundary
      elements[1]
    end
  end

  def _nt_asc_desc
    start_index = index
    if node_cache[:asc_desc].has_key?(index)
      cached = node_cache[:asc_desc][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('ASC', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('ASC')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('DESC', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 4))
        @index += 4
      else
        terminal_parse_failure('DESC')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_boundary
      s0 << r4
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(AscDesc0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:asc_desc][start_index] = r0

    r0
  end

  module Type0
    def boundary
      elements[1]
    end
  end

  def _nt_type
    start_index = index
    if node_cache[:type].has_key?(index)
      cached = node_cache[:type][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    if has_terminal?('NULL', false, index)
      r2 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('NULL')
      r2 = nil
    end
    if r2
      r1 = r2
    else
      if has_terminal?('INTEGER', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 7))
        @index += 7
      else
        terminal_parse_failure('INTEGER')
        r3 = nil
      end
      if r3
        r1 = r3
      else
        if has_terminal?('REAL', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 4))
          @index += 4
        else
          terminal_parse_failure('REAL')
          r4 = nil
        end
        if r4
          r1 = r4
        else
          if has_terminal?('TEXT', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure('TEXT')
            r5 = nil
          end
          if r5
            r1 = r5
          else
            if has_terminal?('BLOB', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 4))
              @index += 4
            else
              terminal_parse_failure('BLOB')
              r6 = nil
            end
            if r6
              r1 = r6
            else
              @index = i1
              r1 = nil
            end
          end
        end
      end
    end
    s0 << r1
    if r1
      r7 = _nt_boundary
      s0 << r7
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Type0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type][start_index] = r0

    r0
  end

  module Constraint0
    def boundary
      elements[1]
    end
  end

  def _nt_constraint
    start_index = index
    if node_cache[:constraint].has_key?(index)
      cached = node_cache[:constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('CONSTRAINT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 10))
      @index += 10
    else
      terminal_parse_failure('CONSTRAINT')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Constraint0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:constraint][start_index] = r0

    r0
  end

  module Autoincrement0
    def boundary
      elements[1]
    end
  end

  def _nt_autoincrement
    start_index = index
    if node_cache[:autoincrement].has_key?(index)
      cached = node_cache[:autoincrement][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('AUTOINCREMENT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 13))
      @index += 13
    else
      terminal_parse_failure('AUTOINCREMENT')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Autoincrement0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:autoincrement][start_index] = r0

    r0
  end

  module On0
    def boundary
      elements[1]
    end
  end

  def _nt_on
    start_index = index
    if node_cache[:on].has_key?(index)
      cached = node_cache[:on][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ON', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('ON')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(On0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:on][start_index] = r0

    r0
  end

  module Conflict0
    def boundary
      elements[1]
    end
  end

  def _nt_conflict
    start_index = index
    if node_cache[:conflict].has_key?(index)
      cached = node_cache[:conflict][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('CONFLICT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('CONFLICT')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Conflict0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:conflict][start_index] = r0

    r0
  end

  module Null0
    def boundary
      elements[1]
    end
  end

  def _nt_null
    start_index = index
    if node_cache[:null].has_key?(index)
      cached = node_cache[:null][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('NULL', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 4))
      @index += 4
    else
      terminal_parse_failure('NULL')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Null0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:null][start_index] = r0

    r0
  end

  module Check0
    def boundary
      elements[1]
    end
  end

  def _nt_check
    start_index = index
    if node_cache[:check].has_key?(index)
      cached = node_cache[:check][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('CHECK', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('CHECK')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Check0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:check][start_index] = r0

    r0
  end

  module Default0
    def boundary
      elements[1]
    end
  end

  def _nt_default
    start_index = index
    if node_cache[:default].has_key?(index)
      cached = node_cache[:default][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('DEFAULT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('DEFAULT')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Default0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:default][start_index] = r0

    r0
  end

  module CurrentTime0
    def boundary
      elements[1]
    end
  end

  def _nt_current_time
    start_index = index
    if node_cache[:current_time].has_key?(index)
      cached = node_cache[:current_time][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('CURRENT_TIME', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 12))
      @index += 12
    else
      terminal_parse_failure('CURRENT_TIME')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CurrentTime0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:current_time][start_index] = r0

    r0
  end

  module CurrentDate0
    def boundary
      elements[1]
    end
  end

  def _nt_current_date
    start_index = index
    if node_cache[:current_date].has_key?(index)
      cached = node_cache[:current_date][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('CURRENT_DATE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 12))
      @index += 12
    else
      terminal_parse_failure('CURRENT_DATE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CurrentDate0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:current_date][start_index] = r0

    r0
  end

  module CurrentTimestamp0
    def boundary
      elements[1]
    end
  end

  def _nt_current_timestamp
    start_index = index
    if node_cache[:current_timestamp].has_key?(index)
      cached = node_cache[:current_timestamp][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('CURRENT_TIMESTAMP', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 17))
      @index += 17
    else
      terminal_parse_failure('CURRENT_TIMESTAMP')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CurrentTimestamp0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:current_timestamp][start_index] = r0

    r0
  end

  module References0
    def boundary
      elements[1]
    end
  end

  def _nt_references
    start_index = index
    if node_cache[:references].has_key?(index)
      cached = node_cache[:references][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('REFERENCES', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 10))
      @index += 10
    else
      terminal_parse_failure('REFERENCES')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(References0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:references][start_index] = r0

    r0
  end

  module Delete0
    def boundary
      elements[1]
    end
  end

  def _nt_delete
    start_index = index
    if node_cache[:delete].has_key?(index)
      cached = node_cache[:delete][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('DELETE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('DELETE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Delete0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:delete][start_index] = r0

    r0
  end

  module Update0
    def boundary
      elements[1]
    end
  end

  def _nt_update
    start_index = index
    if node_cache[:update].has_key?(index)
      cached = node_cache[:update][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('UPDATE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('UPDATE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Update0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:update][start_index] = r0

    r0
  end

  module Set0
    def boundary
      elements[1]
    end
  end

  def _nt_set
    start_index = index
    if node_cache[:set].has_key?(index)
      cached = node_cache[:set][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('SET', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 3))
      @index += 3
    else
      terminal_parse_failure('SET')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Set0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:set][start_index] = r0

    r0
  end

  module Cascade0
    def boundary
      elements[1]
    end
  end

  def _nt_cascade
    start_index = index
    if node_cache[:cascade].has_key?(index)
      cached = node_cache[:cascade][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('CASCADE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 7))
      @index += 7
    else
      terminal_parse_failure('CASCADE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Cascade0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:cascade][start_index] = r0

    r0
  end

  module Restrict0
    def boundary
      elements[1]
    end
  end

  def _nt_restrict
    start_index = index
    if node_cache[:restrict].has_key?(index)
      cached = node_cache[:restrict][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('RESTRICT', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('RESTRICT')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Restrict0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:restrict][start_index] = r0

    r0
  end

  module No0
    def boundary
      elements[1]
    end
  end

  def _nt_no
    start_index = index
    if node_cache[:no].has_key?(index)
      cached = node_cache[:no][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('NO', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 2))
      @index += 2
    else
      terminal_parse_failure('NO')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(No0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:no][start_index] = r0

    r0
  end

  module Action0
    def boundary
      elements[1]
    end
  end

  def _nt_action
    start_index = index
    if node_cache[:action].has_key?(index)
      cached = node_cache[:action][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('ACTION', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 6))
      @index += 6
    else
      terminal_parse_failure('ACTION')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Action0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:action][start_index] = r0

    r0
  end

  module Match0
    def boundary
      elements[1]
    end
  end

  def _nt_match
    start_index = index
    if node_cache[:match].has_key?(index)
      cached = node_cache[:match][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('MATCH', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 5))
      @index += 5
    else
      terminal_parse_failure('MATCH')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Match0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:match][start_index] = r0

    r0
  end

  module Deferrable0
    def boundary
      elements[1]
    end
  end

  def _nt_deferrable
    start_index = index
    if node_cache[:deferrable].has_key?(index)
      cached = node_cache[:deferrable][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('DEFERRABLE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 10))
      @index += 10
    else
      terminal_parse_failure('DEFERRABLE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Deferrable0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:deferrable][start_index] = r0

    r0
  end

  module Initially0
    def boundary
      elements[1]
    end
  end

  def _nt_initially
    start_index = index
    if node_cache[:initially].has_key?(index)
      cached = node_cache[:initially][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('INITIALLY', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
      @index += 9
    else
      terminal_parse_failure('INITIALLY')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Initially0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:initially][start_index] = r0

    r0
  end

  module Deferred0
    def boundary
      elements[1]
    end
  end

  def _nt_deferred
    start_index = index
    if node_cache[:deferred].has_key?(index)
      cached = node_cache[:deferred][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('DEFERRED', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 8))
      @index += 8
    else
      terminal_parse_failure('DEFERRED')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Deferred0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:deferred][start_index] = r0

    r0
  end

  module Immediate0
    def boundary
      elements[1]
    end
  end

  def _nt_immediate
    start_index = index
    if node_cache[:immediate].has_key?(index)
      cached = node_cache[:immediate][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('IMMEDIATE', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 9))
      @index += 9
    else
      terminal_parse_failure('IMMEDIATE')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_boundary
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Immediate0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:immediate][start_index] = r0

    r0
  end

  module NoAction0
    def no
      elements[0]
    end

    def action
      elements[1]
    end
  end

  def _nt_no_action
    start_index = index
    if node_cache[:no_action].has_key?(index)
      cached = node_cache[:no_action][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_no
    s0 << r1
    if r1
      r2 = _nt_action
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NoAction0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:no_action][start_index] = r0

    r0
  end

  module NotNull0
    def not
      elements[0]
    end

    def null
      elements[1]
    end
  end

  def _nt_not_null
    start_index = index
    if node_cache[:not_null].has_key?(index)
      cached = node_cache[:not_null][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_not
    s0 << r1
    if r1
      r2 = _nt_null
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NotNull0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:not_null][start_index] = r0

    r0
  end

  module OnConflict0
    def on
      elements[0]
    end

    def conflict
      elements[1]
    end
  end

  def _nt_on_conflict
    start_index = index
    if node_cache[:on_conflict].has_key?(index)
      cached = node_cache[:on_conflict][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_on
    s0 << r1
    if r1
      r2 = _nt_conflict
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(OnConflict0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:on_conflict][start_index] = r0

    r0
  end

  module ForeignKey0
    def foreign
      elements[0]
    end

    def key
      elements[1]
    end
  end

  def _nt_foreign_key
    start_index = index
    if node_cache[:foreign_key].has_key?(index)
      cached = node_cache[:foreign_key][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_foreign
    s0 << r1
    if r1
      r2 = _nt_key
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ForeignKey0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:foreign_key][start_index] = r0

    r0
  end

  module PrimaryKey0
    def primary
      elements[0]
    end

    def key
      elements[1]
    end
  end

  def _nt_primary_key
    start_index = index
    if node_cache[:primary_key].has_key?(index)
      cached = node_cache[:primary_key][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_primary
    s0 << r1
    if r1
      r2 = _nt_key
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(PrimaryKey0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:primary_key][start_index] = r0

    r0
  end

  module IfNotExists0
    def if
      elements[0]
    end

    def not
      elements[1]
    end

    def exists
      elements[2]
    end
  end

  def _nt_if_not_exists
    start_index = index
    if node_cache[:if_not_exists].has_key?(index)
      cached = node_cache[:if_not_exists][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_if
    s0 << r1
    if r1
      r2 = _nt_not
      s0 << r2
      if r2
        r3 = _nt_exists
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IfNotExists0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:if_not_exists][start_index] = r0

    r0
  end

  def _nt_identifier
    start_index = index
    if node_cache[:identifier].has_key?(index)
      cached = node_cache[:identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_quoted_identifier
    if r1
      r0 = r1
    else
      r2 = _nt_unquoted_identifier
      if r2
        r0 = r2
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:identifier][start_index] = r0

    r0
  end

  module QuotedIdentifier0
  end

  module QuotedIdentifier1
  end

  module QuotedIdentifier2
    def whitespace_eater
      elements[1]
    end
  end

  def _nt_quoted_identifier
    start_index = index
    if node_cache[:quoted_identifier].has_key?(index)
      cached = node_cache[:quoted_identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    if has_terminal?('`', false, index)
      r3 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('`')
      r3 = nil
    end
    s2 << r3
    if r3
      s4, i4 = [], index
      loop do
        if has_terminal?('\G[^`]', true, index)
          r5 = true
          @index += 1
        else
          r5 = nil
        end
        if r5
          s4 << r5
        else
          break
        end
      end
      if s4.empty?
        @index = i4
        r4 = nil
      else
        r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
      end
      s2 << r4
      if r4
        if has_terminal?('`', false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure('`')
          r6 = nil
        end
        s2 << r6
      end
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(QuotedIdentifier0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      i7, s7 = index, []
      if has_terminal?('[', false, index)
        r8 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('[')
        r8 = nil
      end
      s7 << r8
      if r8
        s9, i9 = [], index
        loop do
          if has_terminal?('\G[^\\]]', true, index)
            r10 = true
            @index += 1
          else
            r10 = nil
          end
          if r10
            s9 << r10
          else
            break
          end
        end
        if s9.empty?
          @index = i9
          r9 = nil
        else
          r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        end
        s7 << r9
        if r9
          if has_terminal?(']', false, index)
            r11 = instantiate_node(SyntaxNode,input, index...(index + 1))
            @index += 1
          else
            terminal_parse_failure(']')
            r11 = nil
          end
          s7 << r11
        end
      end
      if s7.last
        r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
        r7.extend(QuotedIdentifier1)
      else
        @index = i7
        r7 = nil
      end
      if r7
        r1 = r7
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r12 = _nt_whitespace_eater
      s0 << r12
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(QuotedIdentifier2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:quoted_identifier][start_index] = r0

    r0
  end

  module UnquotedIdentifier0
    def boundary
      elements[1]
    end
  end

  def _nt_unquoted_identifier
    start_index = index
    if node_cache[:unquoted_identifier].has_key?(index)
      cached = node_cache[:unquoted_identifier][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    s1, i1 = [], index
    loop do
      if has_terminal?('\G[\\w]', true, index)
        r2 = true
        @index += 1
      else
        r2 = nil
      end
      if r2
        s1 << r2
      else
        break
      end
    end
    if s1.empty?
      @index = i1
      r1 = nil
    else
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
    end
    s0 << r1
    if r1
      r3 = _nt_boundary
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UnquotedIdentifier0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:unquoted_identifier][start_index] = r0

    r0
  end

  module ColumnDefs0
    def comma
      elements[0]
    end

    def column_def
      elements[1]
    end
  end

  module ColumnDefs1
    def a
      elements[0]
    end

    def b
      elements[1]
    end
  end

  module ColumnDefs2
    def columns
      result = [a]
      b.elements.each { |e| result << e.elements[1] }
      result
    end
  end

  def _nt_column_defs
    start_index = index
    if node_cache[:column_defs].has_key?(index)
      cached = node_cache[:column_defs][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_column_def
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_comma
        s3 << r4
        if r4
          r5 = _nt_column_def
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(ColumnDefs0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ColumnDefs1)
      r0.extend(ColumnDefs2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:column_defs][start_index] = r0

    r0
  end

  module ColumnDef0
    def identifier
      elements[0]
    end

    def a
      elements[2]
    end
  end

  module ColumnDef1
    def collation
      debugger
      if a.respond_to?(:collation)
        a.collation
      else
        nil
      end
    end
  end

  def _nt_column_def
    start_index = index
    if node_cache[:column_def].has_key?(index)
      cached = node_cache[:column_def][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      r3 = _nt_type_name
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r5 = _nt_column_constraints
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ColumnDef0)
      r0.extend(ColumnDef1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:column_def][start_index] = r0

    r0
  end

  module TableConstraints0
    def comma
      elements[0]
    end

    def table_constraint
      elements[1]
    end
  end

  module TableConstraints1
    def table_constraint
      elements[0]
    end

  end

  def _nt_table_constraints
    start_index = index
    if node_cache[:table_constraints].has_key?(index)
      cached = node_cache[:table_constraints][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_table_constraint
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        r4 = _nt_comma
        s3 << r4
        if r4
          r5 = _nt_table_constraint
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(TableConstraints0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TableConstraints1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:table_constraints][start_index] = r0

    r0
  end

  module TableConstraint0
    def table_primary_key_constraint
      elements[1]
    end
  end

  def _nt_table_constraint
    start_index = index
    if node_cache[:table_constraint].has_key?(index)
      cached = node_cache[:table_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r3 = _nt_constraint_name
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      r4 = _nt_table_primary_key_constraint
      s1 << r4
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(TableConstraint0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r5 = _nt_check_constraint
      if r5
        r0 = r5
      else
        r6 = _nt_table_foreign_key_constraint
        if r6
          r0 = r6
        else
          @index = i0
          r0 = nil
        end
      end
    end

    node_cache[:table_constraint][start_index] = r0

    r0
  end

  module TablePrimaryKeyConstraint0
    def comma
      elements[0]
    end

    def indexed_column
      elements[1]
    end
  end

  module TablePrimaryKeyConstraint1
    def left_paren
      elements[1]
    end

    def indexed_column
      elements[2]
    end

    def right_paren
      elements[4]
    end

  end

  def _nt_table_primary_key_constraint
    start_index = index
    if node_cache[:table_primary_key_constraint].has_key?(index)
      cached = node_cache[:table_primary_key_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    r2 = _nt_primary_key
    if r2
      r1 = r2
    else
      r3 = _nt_unique
      if r3
        r1 = r3
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      r4 = _nt_left_paren
      s0 << r4
      if r4
        r5 = _nt_indexed_column
        s0 << r5
        if r5
          s6, i6 = [], index
          loop do
            i7, s7 = index, []
            r8 = _nt_comma
            s7 << r8
            if r8
              r9 = _nt_indexed_column
              s7 << r9
            end
            if s7.last
              r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
              r7.extend(TablePrimaryKeyConstraint0)
            else
              @index = i7
              r7 = nil
            end
            if r7
              s6 << r7
            else
              break
            end
          end
          r6 = instantiate_node(SyntaxNode,input, i6...index, s6)
          s0 << r6
          if r6
            r10 = _nt_right_paren
            s0 << r10
            if r10
              r12 = _nt_conflict_clause
              if r12
                r11 = r12
              else
                r11 = instantiate_node(SyntaxNode,input, index...index)
              end
              s0 << r11
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TablePrimaryKeyConstraint1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:table_primary_key_constraint][start_index] = r0

    r0
  end

  module IndexedColumn0
    def identifier
      elements[0]
    end

  end

  def _nt_indexed_column
    start_index = index
    if node_cache[:indexed_column].has_key?(index)
      cached = node_cache[:indexed_column][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_identifier
    s0 << r1
    if r1
      r3 = _nt_collate_clause
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r5 = _nt_asc_desc
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IndexedColumn0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:indexed_column][start_index] = r0

    r0
  end

  def _nt_collation_name
    start_index = index
    if node_cache[:collation_name].has_key?(index)
      cached = node_cache[:collation_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_identifier

    node_cache[:collation_name][start_index] = r0

    r0
  end

  module CollateClause0
    def collate
      elements[0]
    end

    def a
      elements[1]
    end
  end

  module CollateClause1
    def collation_name
      a.text_value.strip
    end
  end

  def _nt_collate_clause
    start_index = index
    if node_cache[:collate_clause].has_key?(index)
      cached = node_cache[:collate_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_collate
    s0 << r1
    if r1
      r2 = _nt_collation_name
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CollateClause0)
      r0.extend(CollateClause1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:collate_clause][start_index] = r0

    r0
  end

  module TableForeignKeyConstraint0
    def comma
      elements[0]
    end

    def column_name
      elements[1]
    end
  end

  module TableForeignKeyConstraint1
    def foreign_key
      elements[0]
    end

    def left_paren
      elements[1]
    end

    def column_name
      elements[2]
    end

    def right_paren
      elements[4]
    end

    def foreign_key_clause
      elements[5]
    end
  end

  def _nt_table_foreign_key_constraint
    start_index = index
    if node_cache[:table_foreign_key_constraint].has_key?(index)
      cached = node_cache[:table_foreign_key_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_foreign_key
    s0 << r1
    if r1
      r2 = _nt_left_paren
      s0 << r2
      if r2
        r3 = _nt_column_name
        s0 << r3
        if r3
          s4, i4 = [], index
          loop do
            i5, s5 = index, []
            r6 = _nt_comma
            s5 << r6
            if r6
              r7 = _nt_column_name
              s5 << r7
            end
            if s5.last
              r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
              r5.extend(TableForeignKeyConstraint0)
            else
              @index = i5
              r5 = nil
            end
            if r5
              s4 << r5
            else
              break
            end
          end
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          s0 << r4
          if r4
            r8 = _nt_right_paren
            s0 << r8
            if r8
              r9 = _nt_foreign_key_clause
              s0 << r9
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TableForeignKeyConstraint1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:table_foreign_key_constraint][start_index] = r0

    r0
  end

  module TypeName0
    def comma
      elements[0]
    end

    def signed_number
      elements[1]
    end
  end

  module TypeName1
    def left_paren
      elements[0]
    end

    def signed_number
      elements[1]
    end

    def right_paren
      elements[3]
    end
  end

  module TypeName2
    def type
      elements[0]
    end

  end

  def _nt_type_name
    start_index = index
    if node_cache[:type_name].has_key?(index)
      cached = node_cache[:type_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_type
    s0 << r1
    if r1
      i3, s3 = index, []
      r4 = _nt_left_paren
      s3 << r4
      if r4
        r5 = _nt_signed_number
        s3 << r5
        if r5
          i7, s7 = index, []
          r8 = _nt_comma
          s7 << r8
          if r8
            r9 = _nt_signed_number
            s7 << r9
          end
          if s7.last
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            r7.extend(TypeName0)
          else
            @index = i7
            r7 = nil
          end
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s3 << r6
          if r6
            r10 = _nt_right_paren
            s3 << r10
          end
        end
      end
      if s3.last
        r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
        r3.extend(TypeName1)
      else
        @index = i3
        r3 = nil
      end
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(TypeName2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:type_name][start_index] = r0

    r0
  end

  module SignedNumber0
    def numeric_literal
      elements[1]
    end
  end

  def _nt_signed_number
    start_index = index
    if node_cache[:signed_number].has_key?(index)
      cached = node_cache[:signed_number][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[+-]', true, index)
      r2 = true
      @index += 1
    else
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_numeric_literal
      s0 << r3
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(SignedNumber0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:signed_number][start_index] = r0

    r0
  end

  module NumericLiteral0
  end

  module NumericLiteral1
  end

  module NumericLiteral2
    def boundary
      elements[2]
    end
  end

  def _nt_numeric_literal
    start_index = index
    if node_cache[:numeric_literal].has_key?(index)
      cached = node_cache[:numeric_literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    i1 = index
    i2, s2 = index, []
    s3, i3 = [], index
    loop do
      if has_terminal?('\G[0-9]', true, index)
        r4 = true
        @index += 1
      else
        r4 = nil
      end
      if r4
        s3 << r4
      else
        break
      end
    end
    if s3.empty?
      @index = i3
      r3 = nil
    else
      r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
    end
    s2 << r3
    if r3
      r6 = _nt_decimal_portion
      if r6
        r5 = r6
      else
        r5 = instantiate_node(SyntaxNode,input, index...index)
      end
      s2 << r5
    end
    if s2.last
      r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      r2.extend(NumericLiteral0)
    else
      @index = i2
      r2 = nil
    end
    if r2
      r1 = r2
    else
      r7 = _nt_decimal_portion
      if r7
        r1 = r7
      else
        @index = i1
        r1 = nil
      end
    end
    s0 << r1
    if r1
      i9, s9 = index, []
      if has_terminal?('E', false, index)
        r10 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure('E')
        r10 = nil
      end
      s9 << r10
      if r10
        if has_terminal?('\G[+-]', true, index)
          r12 = true
          @index += 1
        else
          r12 = nil
        end
        if r12
          r11 = r12
        else
          r11 = instantiate_node(SyntaxNode,input, index...index)
        end
        s9 << r11
        if r11
          s13, i13 = [], index
          loop do
            if has_terminal?('\G[0-9]', true, index)
              r14 = true
              @index += 1
            else
              r14 = nil
            end
            if r14
              s13 << r14
            else
              break
            end
          end
          if s13.empty?
            @index = i13
            r13 = nil
          else
            r13 = instantiate_node(SyntaxNode,input, i13...index, s13)
          end
          s9 << r13
        end
      end
      if s9.last
        r9 = instantiate_node(SyntaxNode,input, i9...index, s9)
        r9.extend(NumericLiteral1)
      else
        @index = i9
        r9 = nil
      end
      if r9
        r8 = r9
      else
        r8 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r8
      if r8
        r15 = _nt_boundary
        s0 << r15
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(NumericLiteral2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:numeric_literal][start_index] = r0

    r0
  end

  module DecimalPortion0
  end

  def _nt_decimal_portion
    start_index = index
    if node_cache[:decimal_portion].has_key?(index)
      cached = node_cache[:decimal_portion][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('.', false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure('.')
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        if has_terminal?('\G[0-9]', true, index)
          r3 = true
          @index += 1
        else
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(DecimalPortion0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:decimal_portion][start_index] = r0

    r0
  end

  module ColumnConstraints0
    def collation
      collation = nil
      elements.each { |e| if e.collation then collation = e.collation; break; end }
    end
  end

  def _nt_column_constraints
    start_index = index
    if node_cache[:column_constraints].has_key?(index)
      cached = node_cache[:column_constraints][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      r1 = _nt_column_constraint
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ColumnConstraints0)
    end

    node_cache[:column_constraints][start_index] = r0

    r0
  end

  module ColumnConstraint0
    def column_primary_key_constraint
      elements[1]
    end
  end

  module ColumnConstraint1
    def collation
      elements.each do |elt|
        if elt.respond_to?(:collation_name)
          return elt.collation_name
        end
      end
      nil
    end
  end

  def _nt_column_constraint
    start_index = index
    if node_cache[:column_constraint].has_key?(index)
      cached = node_cache[:column_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r3 = _nt_constraint_name
    if r3
      r2 = r3
    else
      r2 = instantiate_node(SyntaxNode,input, index...index)
    end
    s1 << r2
    if r2
      r4 = _nt_column_primary_key_constraint
      s1 << r4
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ColumnConstraint0)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      r5 = _nt_column_not_null_constraint
      if r5
        r0 = r5
      else
        r6 = _nt_column_unique_constraint
        if r6
          r0 = r6
        else
          r7 = _nt_check_constraint
          if r7
            r0 = r7
          else
            r8 = _nt_column_default_constraint
            if r8
              r0 = r8
            else
              r9 = _nt_column_collate_constraint
              if r9
                r0 = r9
              else
                r10 = _nt_foreign_key_clause
                r10.extend(ColumnConstraint1)
                if r10
                  r0 = r10
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:column_constraint][start_index] = r0

    r0
  end

  module ConstraintName0
    def constraint
      elements[0]
    end

    def identifier
      elements[1]
    end
  end

  def _nt_constraint_name
    start_index = index
    if node_cache[:constraint_name].has_key?(index)
      cached = node_cache[:constraint_name][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_constraint
    s0 << r1
    if r1
      r2 = _nt_identifier
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ConstraintName0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:constraint_name][start_index] = r0

    r0
  end

  module ColumnPrimaryKeyConstraint0
    def primary_key
      elements[0]
    end

  end

  def _nt_column_primary_key_constraint
    start_index = index
    if node_cache[:column_primary_key_constraint].has_key?(index)
      cached = node_cache[:column_primary_key_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_primary_key
    s0 << r1
    if r1
      r3 = _nt_asc_desc
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
      if r2
        r5 = _nt_conflict_clause
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
        if r4
          r7 = _nt_autoincrement
          if r7
            r6 = r7
          else
            r6 = instantiate_node(SyntaxNode,input, index...index)
          end
          s0 << r6
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ColumnPrimaryKeyConstraint0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:column_primary_key_constraint][start_index] = r0

    r0
  end

  module ConflictClause0
    def on_conflict
      elements[0]
    end

    def boundary
      elements[2]
    end
  end

  def _nt_conflict_clause
    start_index = index
    if node_cache[:conflict_clause].has_key?(index)
      cached = node_cache[:conflict_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_on_conflict
    s0 << r1
    if r1
      i2 = index
      if has_terminal?('ROLLBACK', false, index)
        r3 = instantiate_node(SyntaxNode,input, index...(index + 8))
        @index += 8
      else
        terminal_parse_failure('ROLLBACK')
        r3 = nil
      end
      if r3
        r2 = r3
      else
        if has_terminal?('ABORT', false, index)
          r4 = instantiate_node(SyntaxNode,input, index...(index + 5))
          @index += 5
        else
          terminal_parse_failure('ABORT')
          r4 = nil
        end
        if r4
          r2 = r4
        else
          if has_terminal?('FAIL', false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 4))
            @index += 4
          else
            terminal_parse_failure('FAIL')
            r5 = nil
          end
          if r5
            r2 = r5
          else
            if has_terminal?('IGNORE', false, index)
              r6 = instantiate_node(SyntaxNode,input, index...(index + 6))
              @index += 6
            else
              terminal_parse_failure('IGNORE')
              r6 = nil
            end
            if r6
              r2 = r6
            else
              if has_terminal?('REPLACE', false, index)
                r7 = instantiate_node(SyntaxNode,input, index...(index + 7))
                @index += 7
              else
                terminal_parse_failure('REPLACE')
                r7 = nil
              end
              if r7
                r2 = r7
              else
                @index = i2
                r2 = nil
              end
            end
          end
        end
      end
      s0 << r2
      if r2
        r8 = _nt_boundary
        s0 << r8
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ConflictClause0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:conflict_clause][start_index] = r0

    r0
  end

  module ColumnNotNullConstraint0
    def not_null
      elements[0]
    end

  end

  def _nt_column_not_null_constraint
    start_index = index
    if node_cache[:column_not_null_constraint].has_key?(index)
      cached = node_cache[:column_not_null_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_not_null
    s0 << r1
    if r1
      r3 = _nt_conflict_clause
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ColumnNotNullConstraint0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:column_not_null_constraint][start_index] = r0

    r0
  end

  module ColumnUniqueConstraint0
    def unique
      elements[0]
    end

  end

  def _nt_column_unique_constraint
    start_index = index
    if node_cache[:column_unique_constraint].has_key?(index)
      cached = node_cache[:column_unique_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_unique
    s0 << r1
    if r1
      r3 = _nt_conflict_clause
      if r3
        r2 = r3
      else
        r2 = instantiate_node(SyntaxNode,input, index...index)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ColumnUniqueConstraint0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:column_unique_constraint][start_index] = r0

    r0
  end

  module CheckConstraint0
    def check
      elements[0]
    end

    def left_paren
      elements[1]
    end

    def expr
      elements[2]
    end

    def right_paren
      elements[3]
    end
  end

  def _nt_check_constraint
    start_index = index
    if node_cache[:check_constraint].has_key?(index)
      cached = node_cache[:check_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_check
    s0 << r1
    if r1
      r2 = _nt_left_paren
      s0 << r2
      if r2
        r3 = _nt_expr
        s0 << r3
        if r3
          r4 = _nt_right_paren
          s0 << r4
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(CheckConstraint0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:check_constraint][start_index] = r0

    r0
  end

  def _nt_expr
    start_index = index
    if node_cache[:expr].has_key?(index)
      cached = node_cache[:expr][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if index < input_length
        r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
        @index += 1
      else
        terminal_parse_failure("any character")
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:expr][start_index] = r0

    r0
  end

  module ColumnDefaultConstraint0
    def left_paren
      elements[0]
    end

    def expr
      elements[1]
    end

    def right_paren
      elements[2]
    end
  end

  module ColumnDefaultConstraint1
    def default
      elements[0]
    end

  end

  def _nt_column_default_constraint
    start_index = index
    if node_cache[:column_default_constraint].has_key?(index)
      cached = node_cache[:column_default_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_default
    s0 << r1
    if r1
      i2 = index
      r3 = _nt_signed_number
      if r3
        r2 = r3
      else
        r4 = _nt_literal_value
        if r4
          r2 = r4
        else
          i5, s5 = index, []
          r6 = _nt_left_paren
          s5 << r6
          if r6
            r7 = _nt_expr
            s5 << r7
            if r7
              r8 = _nt_right_paren
              s5 << r8
            end
          end
          if s5.last
            r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
            r5.extend(ColumnDefaultConstraint0)
          else
            @index = i5
            r5 = nil
          end
          if r5
            r2 = r5
          else
            @index = i2
            r2 = nil
          end
        end
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ColumnDefaultConstraint1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:column_default_constraint][start_index] = r0

    r0
  end

  def _nt_literal_value
    start_index = index
    if node_cache[:literal_value].has_key?(index)
      cached = node_cache[:literal_value][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    r1 = _nt_numeric_literal
    if r1
      r0 = r1
    else
      r2 = _nt_string_literal
      if r2
        r0 = r2
      else
        r3 = _nt_blob_literal
        if r3
          r0 = r3
        else
          r4 = _nt_null
          if r4
            r0 = r4
          else
            r5 = _nt_current_time
            if r5
              r0 = r5
            else
              r6 = _nt_current_date
              if r6
                r0 = r6
              else
                r7 = _nt_current_timestamp
                if r7
                  r0 = r7
                else
                  @index = i0
                  r0 = nil
                end
              end
            end
          end
        end
      end
    end

    node_cache[:literal_value][start_index] = r0

    r0
  end

  module StringLiteral0
  end

  def _nt_string_literal
    start_index = index
    if node_cache[:string_literal].has_key?(index)
      cached = node_cache[:string_literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?("'", false, index)
      r1 = instantiate_node(SyntaxNode,input, index...(index + 1))
      @index += 1
    else
      terminal_parse_failure("'")
      r1 = nil
    end
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3 = index
        if has_terminal?('\G[\\w]', true, index)
          r4 = true
          @index += 1
        else
          r4 = nil
        end
        if r4
          r3 = r4
        else
          if has_terminal?("''", false, index)
            r5 = instantiate_node(SyntaxNode,input, index...(index + 2))
            @index += 2
          else
            terminal_parse_failure("''")
            r5 = nil
          end
          if r5
            r3 = r5
          else
            @index = i3
            r3 = nil
          end
        end
        if r3
          s2 << r3
        else
          break
        end
      end
      if s2.empty?
        @index = i2
        r2 = nil
      else
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
      if r2
        if has_terminal?("'", false, index)
          r6 = instantiate_node(SyntaxNode,input, index...(index + 1))
          @index += 1
        else
          terminal_parse_failure("'")
          r6 = nil
        end
        s0 << r6
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StringLiteral0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:string_literal][start_index] = r0

    r0
  end

  module BlobLiteral0
    def string_literal
      elements[1]
    end
  end

  def _nt_blob_literal
    start_index = index
    if node_cache[:blob_literal].has_key?(index)
      cached = node_cache[:blob_literal][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if has_terminal?('\G[xX]', true, index)
      r1 = true
      @index += 1
    else
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_string_literal
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(BlobLiteral0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:blob_literal][start_index] = r0

    r0
  end

  module ColumnCollateConstraint0
    def collation_name
      elements[0].collation_name
    end
  end

  def _nt_column_collate_constraint
    start_index = index
    if node_cache[:column_collate_constraint].has_key?(index)
      cached = node_cache[:column_collate_constraint][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_collate_clause
    r0.extend(ColumnCollateConstraint0)

    node_cache[:column_collate_constraint][start_index] = r0

    r0
  end

  module ForeignKeyClause0
    def comma
      elements[0]
    end

    def identifier
      elements[1]
    end
  end

  module ForeignKeyClause1
    def left_paren
      elements[0]
    end

    def identifier
      elements[1]
    end

    def right_paren
      elements[3]
    end
  end

  module ForeignKeyClause2
    def references
      elements[0]
    end

    def identifier
      elements[1]
    end

  end

  def _nt_foreign_key_clause
    start_index = index
    if node_cache[:foreign_key_clause].has_key?(index)
      cached = node_cache[:foreign_key_clause][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_references
    s0 << r1
    if r1
      r2 = _nt_identifier
      s0 << r2
      if r2
        i4, s4 = index, []
        r5 = _nt_left_paren
        s4 << r5
        if r5
          r6 = _nt_identifier
          s4 << r6
          if r6
            s7, i7 = [], index
            loop do
              i8, s8 = index, []
              r9 = _nt_comma
              s8 << r9
              if r9
                r10 = _nt_identifier
                s8 << r10
              end
              if s8.last
                r8 = instantiate_node(SyntaxNode,input, i8...index, s8)
                r8.extend(ForeignKeyClause0)
              else
                @index = i8
                r8 = nil
              end
              if r8
                s7 << r8
              else
                break
              end
            end
            r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
            s4 << r7
            if r7
              r11 = _nt_right_paren
              s4 << r11
            end
          end
        end
        if s4.last
          r4 = instantiate_node(SyntaxNode,input, i4...index, s4)
          r4.extend(ForeignKeyClause1)
        else
          @index = i4
          r4 = nil
        end
        if r4
          r3 = r4
        else
          r3 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r3
        if r3
          s12, i12 = [], index
          loop do
            r13 = _nt_foreign_key_clause_2
            if r13
              s12 << r13
            else
              break
            end
          end
          r12 = instantiate_node(SyntaxNode,input, i12...index, s12)
          s0 << r12
          if r12
            r15 = _nt_foreign_key_clause_3
            if r15
              r14 = r15
            else
              r14 = instantiate_node(SyntaxNode,input, index...index)
            end
            s0 << r14
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ForeignKeyClause2)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:foreign_key_clause][start_index] = r0

    r0
  end

  module ForeignKeyClause20
    def set
      elements[0]
    end

  end

  module ForeignKeyClause21
    def on
      elements[0]
    end

  end

  module ForeignKeyClause22
    def match
      elements[0]
    end

    def identifier
      elements[1]
    end
  end

  def _nt_foreign_key_clause_2
    start_index = index
    if node_cache[:foreign_key_clause_2].has_key?(index)
      cached = node_cache[:foreign_key_clause_2][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0 = index
    i1, s1 = index, []
    r2 = _nt_on
    s1 << r2
    if r2
      i3 = index
      r4 = _nt_delete
      if r4
        r3 = r4
      else
        r5 = _nt_update
        if r5
          r3 = r5
        else
          @index = i3
          r3 = nil
        end
      end
      s1 << r3
      if r3
        i6 = index
        i7, s7 = index, []
        r8 = _nt_set
        s7 << r8
        if r8
          i9 = index
          r10 = _nt_null
          if r10
            r9 = r10
          else
            r11 = _nt_default
            if r11
              r9 = r11
            else
              @index = i9
              r9 = nil
            end
          end
          s7 << r9
        end
        if s7.last
          r7 = instantiate_node(SyntaxNode,input, i7...index, s7)
          r7.extend(ForeignKeyClause20)
        else
          @index = i7
          r7 = nil
        end
        if r7
          r6 = r7
        else
          r12 = _nt_cascade
          if r12
            r6 = r12
          else
            r13 = _nt_restrict
            if r13
              r6 = r13
            else
              r14 = _nt_no_action
              if r14
                r6 = r14
              else
                @index = i6
                r6 = nil
              end
            end
          end
        end
        s1 << r6
      end
    end
    if s1.last
      r1 = instantiate_node(SyntaxNode,input, i1...index, s1)
      r1.extend(ForeignKeyClause21)
    else
      @index = i1
      r1 = nil
    end
    if r1
      r0 = r1
    else
      i15, s15 = index, []
      r16 = _nt_match
      s15 << r16
      if r16
        r17 = _nt_identifier
        s15 << r17
      end
      if s15.last
        r15 = instantiate_node(SyntaxNode,input, i15...index, s15)
        r15.extend(ForeignKeyClause22)
      else
        @index = i15
        r15 = nil
      end
      if r15
        r0 = r15
      else
        @index = i0
        r0 = nil
      end
    end

    node_cache[:foreign_key_clause_2][start_index] = r0

    r0
  end

  module ForeignKeyClause30
    def initially
      elements[0]
    end

  end

  module ForeignKeyClause31
    def deferrable
      elements[1]
    end

  end

  def _nt_foreign_key_clause_3
    start_index = index
    if node_cache[:foreign_key_clause_3].has_key?(index)
      cached = node_cache[:foreign_key_clause_3][index]
      if cached
        cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r2 = _nt_not
    if r2
      r1 = r2
    else
      r1 = instantiate_node(SyntaxNode,input, index...index)
    end
    s0 << r1
    if r1
      r3 = _nt_deferrable
      s0 << r3
      if r3
        i5, s5 = index, []
        r6 = _nt_initially
        s5 << r6
        if r6
          i7 = index
          r8 = _nt_deferred
          if r8
            r7 = r8
          else
            r9 = _nt_immediate
            if r9
              r7 = r9
            else
              @index = i7
              r7 = nil
            end
          end
          s5 << r7
        end
        if s5.last
          r5 = instantiate_node(SyntaxNode,input, i5...index, s5)
          r5.extend(ForeignKeyClause30)
        else
          @index = i5
          r5 = nil
        end
        if r5
          r4 = r5
        else
          r4 = instantiate_node(SyntaxNode,input, index...index)
        end
        s0 << r4
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(ForeignKeyClause31)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:foreign_key_clause_3][start_index] = r0

    r0
  end

end

class SQLiteSchemaParser < Treetop::Runtime::CompiledParser
  include SQLiteSchema
end

